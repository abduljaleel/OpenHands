import os
import subprocess
import requests

from openhands.resolver.bitbucket_issue import BitbucketIssue


def bitbucket_branch_exists(base_url: str, branch_name: str, headers: dict) -> bool:
    """Check if a branch exists in the Bitbucket repository.

    Args:
        base_url: The base URL of the Bitbucket repository API
        branch_name: The name of the branch to check
        headers: The HTTP headers to use for authentication
    """
    print(f'Checking if branch {branch_name} exists...')
    response = requests.get(f'{base_url}/refs/branches/{branch_name}', headers=headers)
    exists = response.status_code == 200
    print(f'Branch {branch_name} exists: {exists}')
    return exists


def send_bitbucket_pull_request(
    bitbucket_issue: BitbucketIssue,
    bitbucket_token: str,
    bitbucket_username: str | None,
    patch_dir: str,
    pr_type: str,
    fork_owner: str | None = None,
    additional_message: str | None = None,
    target_branch: str | None = None,
    reviewer: str | None = None,
    pr_title: str | None = None,
) -> str:
    """Send a pull request to a Bitbucket repository.

    Args:
        bitbucket_issue: The issue to send the pull request for
        bitbucket_token: The Bitbucket token to use for authentication
        bitbucket_username: The Bitbucket username, if provided
        patch_dir: The directory containing the patches to apply
        pr_type: The type: branch (no PR created), draft or ready (regular PR created)
        fork_owner: The owner of the fork to push changes to (if different from the original repo workspace)
        additional_message: The additional messages to post as a comment on the PR in json list format
        target_branch: The target branch to create the pull request against (defaults to repository default branch)
        reviewer: The Bitbucket username of the reviewer to assign
        pr_title: Custom title for the pull request (optional)
    """
    if pr_type not in ['branch', 'draft', 'ready']:
        raise ValueError(f'Invalid pr_type: {pr_type}')

    headers = {
        'Authorization': f'Bearer {bitbucket_token}',
        'Accept': 'application/json',
    }
    base_url = f'https://api.bitbucket.org/2.0/repositories/{bitbucket_issue.workspace}/{bitbucket_issue.repo_slug}'

    base_branch_name = f'openhands-fix-issue-{bitbucket_issue.number}'
    branch_name = base_branch_name
    attempt = 1

    print('Checking if branch exists...')
    while bitbucket_branch_exists(base_url, branch_name, headers):
        attempt += 1
        branch_name = f'{base_branch_name}-try{attempt}'

    print('Getting base branch...')
    if target_branch:
        base_branch = target_branch
        response = requests.get(f'{base_url}/refs/branches/{target_branch}', headers=headers)
        if response.status_code != 200:
            raise ValueError(f'Target branch {target_branch} does not exist')
    else:
        response = requests.get(f'{base_url}', headers=headers)
        response.raise_for_status()
        base_branch = response.json()['mainbranch']['name']
    print(f'Base branch: {base_branch}')

    print('Creating new branch...')
    result = subprocess.run(
        ['git', '-C', patch_dir, 'checkout', '-b', branch_name],
        capture_output=True,
        text=True,
    )
    if result.returncode != 0:
        print(f'Error creating new branch: {result.stderr}')
        raise RuntimeError(
            f'Failed to create a new branch {branch_name} in {patch_dir}:'
        )

    push_workspace = fork_owner if fork_owner else bitbucket_issue.workspace
    push_repo = bitbucket_issue.repo_slug

    print('Pushing changes...')
    username_and_token = (
        f'{bitbucket_username}:{bitbucket_token}'
        if bitbucket_username
        else f'x-auth-token:{bitbucket_token}'
    )
    push_url = f'https://{username_and_token}@bitbucket.org/{push_workspace}/{push_repo}.git'
    result = subprocess.run(
        ['git', '-C', patch_dir, 'push', push_url, branch_name],
        capture_output=True,
        text=True,
    )
    if result.returncode != 0:
        print(f'Error pushing changes: {result.stderr}')
        raise RuntimeError('Failed to push changes to the remote repository')

    final_pr_title = (
        pr_title
        if pr_title
        else f'Fix issue #{bitbucket_issue.number}: {bitbucket_issue.title}'
    )
    pr_body = f'This pull request fixes #{bitbucket_issue.number}.'
    if additional_message:
        pr_body += f'\n\n{additional_message}'
    pr_body += '\n\nAutomatic fix generated by [OpenHands](https://github.com/All-Hands-AI/OpenHands/) ðŸ™Œ'

    if pr_type == 'branch':
        url = f'https://bitbucket.org/{push_workspace}/{bitbucket_issue.repo_slug}/branch/{branch_name}'
    else:
        data = {
            'title': final_pr_title,
            'description': pr_body,
            'source': {
                'branch': {
                    'name': branch_name
                }
            },
            'destination': {
                'branch': {
                    'name': base_branch
                }
            },
            'close_source_branch': True
        }

        response = requests.post(f'{base_url}/pullrequests', headers=headers, json=data)
        if response.status_code == 403:
            raise RuntimeError(
                'Failed to create pull request due to missing permissions. '
                'Make sure that the provided token has push permissions for the repository.'
            )
        response.raise_for_status()
        pr_data = response.json()

        if reviewer and pr_type != 'branch':
            review_data = {'reviewers': [{'username': reviewer}]}
            review_response = requests.put(
                f'{base_url}/pullrequests/{pr_data["id"]}',
                headers=headers,
                json=review_data,
            )
            if review_response.status_code != 200:
                print(
                    f'Warning: Failed to request review from {reviewer}: {review_response.text}'
                )

        url = pr_data['links']['html']['href']

    print(
        f'{pr_type} created: {url}\n\n--- Title: {final_pr_title}\n\n--- Body:\n{pr_body}'
    )

    return url


def update_existing_bitbucket_pull_request(
    bitbucket_issue: BitbucketIssue,
    bitbucket_token: str,
    bitbucket_username: str | None,
    patch_dir: str,
    comment_message: str | None = None,
    additional_message: str | None = None,
) -> str:
    """Update an existing pull request with the new patches.

    Args:
        bitbucket_issue: The issue to update.
        bitbucket_token: The Bitbucket token to use for authentication.
        bitbucket_username: The Bitbucket username to use for authentication.
        patch_dir: The directory containing the patches to apply.
        comment_message: The main message to post as a comment on the PR.
        additional_message: The additional messages to post as a comment on the PR in json list format.
    """
    base_url = f'https://api.bitbucket.org/2.0/repositories/{bitbucket_issue.workspace}/{bitbucket_issue.repo_slug}'
    branch_name = bitbucket_issue.head_branch

    push_command = (
        f'git -C {patch_dir} push '
        f'https://{bitbucket_username}:{bitbucket_token}@bitbucket.org/'
        f'{bitbucket_issue.workspace}/{bitbucket_issue.repo_slug}.git {branch_name}'
    )

    result = subprocess.run(push_command, shell=True, capture_output=True, text=True)
    if result.returncode != 0:
        print(f'Error pushing changes: {result.stderr}')
        raise RuntimeError('Failed to push changes to the remote repository')

    pr_url = f'https://bitbucket.org/{bitbucket_issue.workspace}/{bitbucket_issue.repo_slug}/pull-requests/{bitbucket_issue.number}'
    print(f'Updated pull request {pr_url} with new patches.')

    if comment_message:
        headers = {
            'Authorization': f'Bearer {bitbucket_token}',
            'Accept': 'application/json',
        }
        comment_url = f'{base_url}/pullrequests/{bitbucket_issue.number}/comments'
        comment_data = {'content': {'raw': comment_message}}
        comment_response = requests.post(comment_url, headers=headers, json=comment_data)
        if comment_response.status_code != 201:
            print(
                f'Failed to post comment: {comment_response.status_code} {comment_response.text}'
            )
        else:
            print(f'Comment added to the PR: {comment_message}')

    return pr_url
